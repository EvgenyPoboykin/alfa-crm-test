{"version":3,"sources":["App/components/LoaderPage/style.tsx","App/components/LoaderPage/LoaderPage.tsx","App/components/LoaderPage/index.tsx","App/components/Loader/style.tsx","App/components/Loader/Loader.tsx","App/logic/logger.tsx","App/logic/index.tsx","App/logic/LogicApp.tsx","App/App.tsx","App/index.tsx","helpers/serviceWorker.ts","index.tsx","App/state/Context.tsx","App/state/appState.tsx","App/state/user.tsx"],"names":["Container","styled","div","attrs","className","LoaderPage","memo","Loader","animation","keyframes","Div","loginUrl","process","customerUrl","createUrl","LoginOptionsData","email","password","method","body","JSON","stringify","api_key","CustomerOptionsData","token","headers","CreateCustomerOptionsData","data","Logic","children","logic","useState","appState","appstate","setAppState","User","userstate","setUserState","search","setSearch","GetDataFetch","a","prev","fetching","option","fetch","rawData","json","optionC","customerRawData","customerData","localStorage","setItem","redirect","items","console","log","onSubmitAuth","e","preventDefault","AddUser","newUser","newItems","success","dialog","useEffect","getItem","onPressEnterSubmitAuth","key","onClickCancel","onClickSearch","LogicApp","value","fallback","Routers","lazy","then","mod","default","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","ContextApp","createContext","ProviderApp","Provider","rememberMe","name","dob","phone","addr","branch_ids","legal_type","is_study"],"mappings":"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","file":"static/js/main.afb33b30.chunk.js","sourcesContent":["import styled from 'styled-components';\nimport {} from './interfaces';\n\nexport const Container = styled.div.attrs({ className: 'LoaderPage__container' })`\n    width: 100%;\n    height: 100;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\n","import React, { memo } from 'react';\nimport { Container } from './style';\nimport { ILoaderPage } from './interfaces';\nimport Loader from '../Loader/Loader';\n\nconst LoaderPage: React.FC<ILoaderPage> = memo(() => {\n    return (\n        <Container>\n            <Loader />\n        </Container>\n    );\n});\nexport default LoaderPage;\n","import LoaderPage from './LoaderPage';\nexport default LoaderPage;","import styled, { keyframes } from 'styled-components';\nimport {} from './interfaces';\n\nconst animation = keyframes`\n    0% {\n        transform: rotate(0deg);\n    }\n    100% {\n        transform: rotate(360deg);\n    }\n`;\n\nexport const Container = styled.div.attrs({ className: 'Loader__container' })`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    position: relative;\n    width: 40px;\n    height: 30px;\n`;\nexport const Div = styled.div.attrs({ className: 'Loader__container--div' })`\n    box-sizing: border-box;\n    display: block;\n    position: absolute;\n    width: 24px;\n    height: 24px;\n    border: 4px solid #fff;\n    border-radius: 50%;\n    animation: ${animation} 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;\n    border-color: #fff transparent transparent transparent;\n\n    &:nth-child(1) {\n        animation-delay: -0.45s;\n    }\n    &:nth-child(2) {\n        animation-delay: -0.3s;\n    }\n    &:nth-child(3) {\n        animation-delay: -0.15s;\n    }\n`;\n","import React, { memo } from 'react';\nimport { Container, Div } from './style';\nimport { ILoader } from './interfaces';\n\nconst Loader: React.FC<ILoader> = memo(() => {\n    return (\n        <Container>\n            <Div></Div>\n            <Div></Div>\n            <Div></Div>\n            <Div></Div>\n        </Container>\n    );\n});\nexport default Loader;\n","export const loginUrl: string = `${process.env.REACT_APP_API_HOST}${process.env.REACT_APP_API_ADDRESS}auth/login`;\nexport const customerUrl: string = `${process.env.REACT_APP_API_HOST}${process.env.REACT_APP_API_ADDRESS}customer/index`;\nexport const createUrl: string = `${process.env.REACT_APP_API_HOST}${process.env.REACT_APP_API_ADDRESS}customer/create`;\n\nexport const LoginOptionsData = (email: string, password: string) => {\n    return {\n        method: 'POST',\n        body: JSON.stringify({ email: email, api_key: password }),\n    };\n};\nexport const CustomerOptionsData = (token: string) => {\n    return { method: 'POST', headers: { 'X-ALFACRM-TOKEN': token } };\n};\nexport const CreateCustomerOptionsData = (token: string, data: any) => {\n    return { method: 'POST', headers: { 'X-ALFACRM-TOKEN': token }, body: JSON.stringify(data) };\n};\n","import React, { Suspense } from 'react';\nimport LoaderPage from '../components/LoaderPage';\nimport { ProviderApp } from '../state';\nimport { LogicApp } from './LogicApp';\n\ninterface ILogic {\n    children: React.ReactNode;\n}\n\nexport const Logic: React.FC<ILogic> = ({ children }) => {\n    const logic = LogicApp();\n    return (\n        <ProviderApp value={logic}>\n            <Suspense fallback={<LoaderPage />}>{children}</Suspense>\n        </ProviderApp>\n    );\n};\n","import { useEffect, useState } from 'react';\n\nimport {\n    LoginOptionsData,\n    CustomerOptionsData,\n    CreateCustomerOptionsData,\n    loginUrl,\n    customerUrl,\n    createUrl,\n} from './logger';\nimport { appState, IAppState, User } from '../state';\nimport { IItem } from '../state/interfaces';\n\nexport const LogicApp = () => {\n    const [appstate, setAppState] = useState<IAppState>(appState);\n    const [userstate, setUserState] = useState<IItem>(User);\n    const [search, setSearch] = useState<string>('');\n\n    const GetDataFetch = async () => {\n        const { email, password } = appstate;\n\n        setAppState((prev: IAppState) => ({ ...prev, fetching: true }));\n\n        if (appstate.token === '') {\n            // console.log('fetching without login');\n            const option: any = LoginOptionsData(email, password);\n            const rawData = await fetch(loginUrl, option);\n\n            // console.log(rawData);\n            const data = await rawData.json();\n\n            const optionC = CustomerOptionsData(data.token);\n            const customerRawData = await fetch(customerUrl, optionC);\n            const customerData = await customerRawData.json();\n\n            // console.log({ rawData, data, customerRawData, customerData });\n\n            localStorage.setItem('token', data.token);\n\n            // console.log({ rawData, data, customerRawData, customerData });\n\n            setAppState((prev: IAppState) => ({\n                ...prev,\n                fetching: false,\n                token: data.token,\n                redirect: true,\n                email: '',\n                password: '',\n                items: customerData.items,\n            }));\n        } else {\n            console.log('fetching with login');\n\n            const customerRawData = await fetch(customerUrl, CustomerOptionsData(appstate.token));\n            const customerData = await customerRawData.json();\n\n            // console.log({ rawData, data, customerRawData, customerData });\n\n            setAppState((prev: IAppState) => ({\n                ...prev,\n                fetching: false,\n                redirect: true,\n                email: '',\n                password: '',\n                items: customerData.items,\n            }));\n        }\n    };\n\n    const onPressEnterSubmitAuth = (e: React.KeyboardEvent<HTMLFormElement>) => {\n        const { email, password } = appstate;\n\n        if (e.key === 'Enter' && (email !== '' || password !== '')) {\n            GetDataFetch();\n        }\n        return;\n    };\n    const onSubmitAuth = async (e: React.FormEvent<HTMLFormElement>) => {\n        const { email, password } = appstate;\n        e.preventDefault();\n        if (email !== '' || password !== '') {\n            GetDataFetch();\n        }\n    };\n\n    const AddUser = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        const newUser = { ...userstate };\n\n        const newItems = [...appstate.items, newUser];\n\n        const rawData = await fetch(createUrl, CreateCustomerOptionsData(appstate.token, newUser));\n        const data = await rawData.json();\n\n        console.log({ rawData, data });\n\n        if (data.success) {\n            setAppState((prev: IAppState) => ({ ...prev, items: newItems, dialog: false }));\n            setUserState(User);\n            console.log(data);\n        }\n    };\n\n    const onClickCancel = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        setUserState(User);\n        setAppState((prev: IAppState) => ({ ...prev, dialog: false }));\n    };\n\n    const onClickSearch = () => {\n        if (search) {\n            console.log(search);\n        }\n    };\n\n    useEffect(() => {\n        const token = localStorage.getItem('token');\n\n        if (token !== null) {\n            setAppState((prev: IAppState) => ({ ...prev, token: token }));\n        }\n    }, []);\n\n    // console.log(userstate, appstate);\n\n    return {\n        appstate,\n        userstate,\n        setSearch,\n        setUserState,\n        setAppState,\n        onSubmitAuth,\n        onPressEnterSubmitAuth,\n        onClickCancel,\n        onClickSearch,\n        AddUser,\n    };\n};\n","import React, { lazy } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Logic } from './logic';\n\nconst Routers = lazy(() => import('./components').then((mod) => ({ default: mod.Routers })));\n\nconst App: React.FC = () => {\n    return (\n        <Logic>\n            <BrowserRouter>\n                <Routers />\n            </BrowserRouter>\n        </Logic>\n    );\n};\n\nexport default App;\n","import App from './App';\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/css/index.css';\nimport App from './App';\nimport * as serviceWorker from './helpers/serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { createContext } from 'react';\nimport { IProvider } from './interfaces';\n\nexport const ContextApp = createContext<any>(null);\n\nexport const ProviderApp: React.FC<IProvider> = ({ children, value }) => (\n    <ContextApp.Provider value={value}>{children}</ContextApp.Provider>\n);\n","import { IAppState } from './interfaces';\n\nexport const appState: IAppState = {\n    items: [],\n    email: '',\n    password: '',\n    rememberMe: false,\n    fetching: false,\n    token: '',\n    redirect: false,\n    dialog: false,\n};\n","import { IItem } from './interfaces';\n\nexport const User: IItem = {\n    name: '',\n    dob: '',\n    phone: [],\n    email: [],\n    addr: [],\n    branch_ids: [1],\n    legal_type: 1,\n    is_study: 0,\n};\n"],"sourceRoot":""}